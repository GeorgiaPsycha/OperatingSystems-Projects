#include <time.h>
#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>
#include <unistd.h>

const int N_tel = 3; // max telephonites
const int N_cook = 2; // maximum cooks
const int N_oven = 10; // maximum ovens
const int N_deliverer = 7; //maximum deliverers

const int T_orderlow = 1; // [T_order_low - T_order_high] : time range in which a new order arrives
const int T_orderhigh = 5;

const int N_orderlow = 1; // [N_order_low - N_order_high] : range of possible number of pizzas 
const int N_orderhigh = 5;

const int T_paymentlow = 1; // [T_order_low - T_order_high] : time range in which the card is charged with the order
const int T_paymenthigh = 2;

const int C_pizza=10; // the cost of one pizza

const int T_prep = 1; // preparation time for each pizza

const int T_bake = 10; // baking time for each pizza

const int T_pack= 2;//packing time for each pizza

const int T_dellow = 5; // [T_dellow - T_delhigh] : delivery time 
const int T_delhigh = 15;

//Declaration of variables
int no_tel;
int total_money ; // ta esoda ths pizzarias
int no_cooks;
int no__ovens;
int no__deliverers;
int success_order;
int fail_order;
double wait_time;
double max_wait_time;
double total_wait_time;
double customer_service_time;
double total_customer_service_time;
double max_customer_service_time;
double cold_time;
double total_cold_time;
double max_cold_time;
unsigned int seed;

//mutexes
pthread_mutex_t mutex_no_available_tels = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t mutex_no_available_cooks = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t mutex_no_available_ovens = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t mutex_no_available_deliverers = PTHREAD_MUTEX_INITIALIZER;

pthread_mutex_t mutex_total_wait_time = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t mutex_max_wait_time = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t mutex_total_customer_service__time = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t mutex_max_customer_service__time = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t mutex_total_cold_time = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t mutex_max_cold_time = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t mutex_lock_screen = PTHREAD_MUTEX_INITIALIZER;

// conditions
pthread_cond_t cond_no_tels = PTHREAD_COND_INITIALIZER;
pthread_cond_t cond_no_cooks = PTHREAD_COND_INITIALIZER;
pthread_cond_t cond_no_ovens = PTHREAD_COND_INITIALIZER;
pthread_cond_t cond_no_deliverers = PTHREAD_COND_INITIALIZER;


// messages 

void print_order(int oid, boolean s)
{
    printf("\nOrder with id %d was successfull:%b \n\n", oid,s);
}

void print_order_pack(int oid, double pack, double cold)
{
    printf("\nOrder with id %d was packed in %f minutes .\n\n", oid,pack);

void print_order_deliver(int oid, double deliver)
{
    printf("\nOrder with id %d was delivered in %f minutes.\n\n", oid, deliver);
}

void print_order_final(int money, int success,int fail,double wait,double wait_max, double cold,double cold_max, double customer_s,double customer_s_max)
{
    printf("\nO The pizzaria had made %d money today and had %d successfull orders and %d fail orders.\n\n", money, success,fail);
    printf("\n The max wait time was %d and the average was %d.\n\n",wait, wait_max);
    printf("\nThe max customer service time was %d and the average was %d.\n\n",customer_s, customer_s_max);
    printf("\nThe max cold time was %d and the average was %d.\n\n", cold, cold_max);
}


